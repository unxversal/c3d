import OpenAI from 'openai';
import { z } from 'zod';
import { zodToJsonSchema } from 'zod-to-json-schema';
import { getConfig } from './c3d.config.js';

// Schema for the description generation phase
const DescriptionSchema = z.object({
	detailed_description: z.string().describe('A detailed, technical description of the CAD object to be created'),
	key_features: z.array(z.string()).describe('List of key features and specifications'),
	dimensions_guidance: z.string().describe('Guidance on dimensions and proportions'),
	material_considerations: z.string().describe('Considerations for material and manufacturing'),
});

// Schema for the CADQuery code generation phase
const CADQueryCodeSchema = z.object({
	cadquery_code: z.string().describe('Complete CADQuery Python code that generates the object'),
});

export type DescriptionResult = z.infer<typeof DescriptionSchema>;
export type CADQueryResult = z.infer<typeof CADQueryCodeSchema>;

export class AIService {
	private openai: OpenAI;

	constructor() {
		const config = getConfig();
		this.openai = new OpenAI({
			baseURL: `${config.ollamaHost}/v1`,
			apiKey: 'ollama', // Required but ignored by Ollama
		});
	}

	async generateDescription(userPrompt: string): Promise<DescriptionResult> {
		const config = getConfig();
		
		const systemPrompt = `You are an expert CAD designer and mechanical engineer. Your job is to take a user's request for a CAD object and create a detailed, technical description that can be used to generate CADQuery code.

Guidelines:
- Focus on geometric properties, dimensions, and technical specifications
- Consider manufacturing constraints and real-world practicality
- Be specific about shapes, measurements, and relationships between components
- Think about how the object would be constructed step-by-step
- Include details about holes, fillets, chamfers, and other features
- Consider the object's intended use and structural requirements

You must respond with structured JSON containing a detailed description, key features, dimension guidance, and material considerations.`;

		const response = await this.openai.chat.completions.create({
			model: config.ollamaModel,
			messages: [
				{ role: 'system', content: systemPrompt },
				{ role: 'user', content: `Generate a detailed technical description for: ${userPrompt}` }
			],
			response_format: {
				type: 'json_schema',
				json_schema: {
					name: 'description_result',
					strict: true,
					schema: zodToJsonSchema(DescriptionSchema)
				}
			},
			temperature: config.temperature,
			stream: false,
			max_tokens: config.maxTokens, // Use configured token limit
		});

		const content = response.choices[0]?.message?.content;
		if (!content) {
			throw new Error('No response content received from OpenAI API');
		}

		return DescriptionSchema.parse(JSON.parse(content));
	}

	async generateCADQueryCode(userPrompt: string, description: DescriptionResult): Promise<CADQueryResult> {
		const config = getConfig();
		
		console.log('üîß Starting CADQuery code generation...');
		
		const systemPrompt = `You are an expert CADQuery programmer. Generate complete, working CADQuery Python code.

CRITICAL REQUIREMENTS:
- Always import cadquery as cq
- Always end with: cq.exporters.export(result, "output.stl")
- Use cq.Workplane("XY") to start
- Make code complete and runnable
- Use realistic dimensions

RESPONSE FORMAT: JSON with only "cadquery_code" field containing complete Python code.`;

		const userMessage = `Generate CADQuery code for: ${userPrompt}

Description: ${description.detailed_description}

Key features: ${description.key_features.join(', ')}`;

		try {
			console.log('üîß Making OpenAI API call for code generation...');
			
			const response = await this.openai.chat.completions.create({
				model: config.ollamaModel,
				messages: [
					{ role: 'system', content: systemPrompt },
					{ role: 'user', content: userMessage }
				],
				response_format: {
					type: 'json_schema',
					json_schema: {
						name: 'cadquery_result',
						strict: true,
						schema: zodToJsonSchema(CADQueryCodeSchema)
					}
				},
				temperature: config.temperature,
				stream: false,
				max_tokens: config.maxTokens, // Use configured token limit
			});

			console.log('‚úÖ Received response from OpenAI API');

			const content = response.choices[0]?.message?.content;
			if (!content) {
				throw new Error('No response content received from OpenAI API');
			}

			console.log('üîß Parsing JSON response...');
			const parsedResult = CADQueryCodeSchema.parse(JSON.parse(content));
			console.log('‚úÖ Successfully parsed CADQuery code result');
			
			return parsedResult;
			
		} catch (error) {
			console.error('‚ùå Error in CADQuery code generation:', error);
			if (error instanceof Error) {
				console.error('Error message:', error.message);
				console.error('Error stack:', error.stack);
			}
			throw error;
		}
	}

	async checkModelAvailability(): Promise<boolean> {
		try {
			const config = getConfig();
			const models = await this.openai.models.list();
			return models.data.some((model: any) => model.id.includes(config.ollamaModel));
		} catch (error) {
			return false;
		}
	}

	async pullModel(): Promise<void> {
		const config = getConfig();
		// OpenAI compatibility API doesn't support model pulling
		// Fall back to direct Ollama HTTP API call
		try {
			const response = await fetch(`${config.ollamaHost}/api/pull`, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					name: config.ollamaModel,
					stream: false
				})
			});
			
			if (!response.ok) {
				throw new Error(`Failed to pull model: ${response.statusText}`);
			}
		} catch (error) {
			throw new Error(`Failed to pull model: ${error instanceof Error ? error.message : String(error)}`);
		}
	}

	async deleteModel(): Promise<void> {
		const config = getConfig();
		// OpenAI compatibility API doesn't support model deletion
		// Fall back to direct Ollama HTTP API call
		try {
			const response = await fetch(`${config.ollamaHost}/api/delete`, {
				method: 'DELETE',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					name: config.ollamaModel
				})
			});
			
			if (!response.ok) {
				throw new Error(`Failed to delete model: ${response.statusText}`);
			}
		} catch (error) {
			throw new Error(`Failed to delete model: ${error instanceof Error ? error.message : String(error)}`);
		}
	}
}